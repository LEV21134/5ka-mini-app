#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ 5ka Telegram Mini App
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

import os
import sys
import subprocess
import time
import signal
import logging
from pathlib import Path
from typing import Optional
import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FiveKaAppManager:
    def __init__(self):
        self.processes = []
        self.is_development = os.getenv('DEBUG', 'true').lower() == 'true'
        self.base_dir = Path(__file__).parent
        
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤
        required_packages = ['fastapi', 'uvicorn', 'httpx', 'python-telegram-bot']
        missing_packages = []
        
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
            except ImportError:
                missing_packages.append(package)
        
        if missing_packages:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        env_file = self.base_dir / '.env'
        if not env_file.exists():
            logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –ø–æ –ø—Ä–∏–º–µ—Ä—É .env.example")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Ç–æ–∫–µ–Ω–∞
        from dotenv import load_dotenv
        load_dotenv()
        
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not telegram_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
            return False
        
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ")
        return True
    
    def check_ports(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤"""
        ports_to_check = [8000]  # FastAPI –ø–æ—Ä—Ç
        
        for port in ports_to_check:
            for conn in psutil.net_connections():
                if conn.laddr.port == port and conn.status == psutil.CONN_LISTEN:
                    logger.error(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç")
                    logger.info(f"üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port} –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ PORT –≤ .env")
                    return False
        
        logger.info("‚úÖ –ü–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã")
        return True
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = ['logs', 'static', 'static/images']
        
        for directory in directories:
            dir_path = self.base_dir / directory
            dir_path.mkdir(exist_ok=True)
            logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    def start_fastapi(self) -> subprocess.Popen:
        """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
        
        if self.is_development:
            cmd = [
                sys.executable, "-m", "uvicorn", 
                "main:app", 
                "--reload", 
                "--host", "0.0.0.0", 
                "--port", "8000",
                "--log-level", "info"
            ]
        else:
            cmd = [
                sys.executable, "-m", "uvicorn", 
                "main:app", 
                "--host", "0.0.0.0", 
                "--port", "8000",
                "--workers", "4"
            ]
        
        process = subprocess.Popen(
            cmd,
            cwd=self.base_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        time.sleep(3)
        
        if process.poll() is None:
            logger.info("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return process
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä")
            return None
    
    def start_telegram_bot(self) -> subprocess.Popen:
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        bot_file = self.base_dir / 'telegram_bot.py'
        if not bot_file.exists():
            logger.error("‚ùå –§–∞–π–ª telegram_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        process = subprocess.Popen(
            [sys.executable, str(bot_file)],
            cwd=self.base_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        time.sleep(2)
        
        if process.poll() is None:
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return process
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")
            return None
    
    def start_development(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
        
        # –ó–∞–ø—É—Å–∫ FastAPI —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
        fastapi_process = self.start_fastapi()
        if fastapi_process:
            self.processes.append(fastapi_process)
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        bot_process = self.start_telegram_bot()
        if bot_process:
            self.processes.append(bot_process)
        
        if self.processes:
            logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            logger.info("üì± Telegram: –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            logger.info("üåê API: http://localhost:8000")
            logger.info("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
            logger.info("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    def start_production(self):
        """–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —á–µ—Ä–µ–∑ Docker"""
        logger.info("üè≠ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        try:
            subprocess.run(['docker', '--version'], check=True, capture_output=True)
            subprocess.run(['docker-compose', '--version'], check=True, capture_output=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("‚ùå Docker –∏–ª–∏ Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/")
            return
        
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose
        compose_file = self.base_dir / 'docker-compose.yml'
        if not compose_file.exists():
            logger.error("‚ùå –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            subprocess.run(
                ['docker-compose', 'up', '--build', '-d'],
                cwd=self.base_dir,
                check=True
            )
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Docker")
            logger.info("üìä –°—Ç–∞—Ç—É—Å: docker-compose ps")
            logger.info("üìã –õ–æ–≥–∏: docker-compose logs -f")
        except subprocess.CalledProcessError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Compose")
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        for process in self.processes:
            if process.poll() is None:
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
        
        self.processes.clear()
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        def signal_handler(signum, frame):
            self.stop_all()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_dependencies():
            sys.exit(1)
        
        if not self.check_ports():
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.create_directories()
        
        # –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.is_development:
            self.start_development()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            try:
                while True:
                    time.sleep(1)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ –∂–∏–≤—ã
                    for process in self.processes[:]:
                        if process.poll() is not None:
                            logger.warning(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: PID {process.pid}")
                            self.processes.remove(process)
            except KeyboardInterrupt:
                pass
        else:
            self.start_production()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("""
    üõí 5ka Telegram Mini App
    ========================
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'dev':
            os.environ['DEBUG'] = 'true'
        elif command == 'prod':
            os.environ['DEBUG'] = 'false'
        elif command == 'check':
            manager = FiveKaAppManager()
            if manager.check_dependencies() and manager.check_ports():
                print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                sys.exit(0)
            else:
                print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                sys.exit(1)
        elif command == 'stop':
            try:
                subprocess.run(['docker-compose', 'down'], check=True)
                print("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except subprocess.CalledProcessError:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker")
            sys.exit(0)
        else:
            print(f"""
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python startup.py          # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    python startup.py dev       # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    python startup.py prod      # –ü—Ä–æ–¥–∞–∫—à–µ–Ω (Docker)
    python startup.py check     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    python startup.py stop      # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
            """)
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    manager = FiveKaAppManager()
    manager.run()

if __name__ == "__main__":
    main()